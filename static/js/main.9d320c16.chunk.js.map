{"version":3,"sources":["TechData.ts","components/Header.tsx","components/Footer.tsx","config/index.tsx","components/Home.tsx","components/About.tsx","components/Tech.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["whereToUse","Header","react_default","a","createElement","style","display","justifyContent","alignItems","backgroundColor","height","react_router_dom","to","Footer","href","Techs","id","name","side","Frontend","memo","Backend","Mobile","Home","Fragment","components_Header","map","tech","concat","toString","key","components_Footer","About","withRouter","_ref","history","location","match","techId","parseInt","params","find","undefined","react_router","width","margin","App","className","path","component","Tech","Boolean","window","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d320c16.chunk.js","sourcesContent":["export interface TechData{\n  id: number;\n  name: string;\n  side: whereToUse;\n  memo: string;\n}\n\nexport enum whereToUse{\n  Backend,\n  Frontend,\n  Mobile,\n}\n\nexport const Techs: TechData[] = \n[\n  {\n    id: 1,\n    name: 'JavaScript',\n    side: whereToUse.Frontend,\n    memo: 'JavaScript, often abbreviated as JS, is a high-level, interpreted programming language that conforms to the ECMAScript specification. JavaScript has curly-bracket syntax, dynamic typing, prototype-based object-orientation, and first-class functions.'\n  },\n  {\n    id: 2,\n    name: 'PHP',\n    side: whereToUse.Backend,\n    memo: 'PHP: Hypertext Preprocessor (or simply PHP) is a general-purpose programming language originally designed for web development. It was originally created by Rasmus Lerdorf in 1994 the PHP reference implementation is now produced by The PHP Group. PHP originally stood for Personal Home Page, but it now stands for the recursive initialism PHP: Hypertext Preprocessor.'\n  },\n  {\n    id: 3,\n    name: 'React',\n    side: whereToUse.Frontend,\n    memo: 'React (also known as React.js or ReactJS) is a JavaScript library for building user interfaces. It is maintained by Facebook and a community of individual developers and companies.'\n  },\n  {\n    id: 4,\n    name: 'Laravel',\n    side: whereToUse.Backend,\n    memo: 'Laravel is a free, open-source PHP web framework, created by Taylor Otwell and intended for the development of web applications following the model–view–controller (MVC) architectural pattern and based on Symfony. '\n  },\n  {\n    id: 5,\n    name: 'Swift',\n    side: whereToUse.Mobile,\n    memo: \"Swift is a general-purpose, multi-paradigm, compiled programming language developed by Apple Inc. for iOS, macOS, watchOS, tvOS, Linux, and z/OS. Swift is designed to work with Apple's Cocoa and Cocoa Touch frameworks and the large body of existing Objective-C code written for Apple products. \"\n  }\n]","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nconst Header: React.FC= () => {\n  return(\n    <div style={{\n      display: 'flex',\n      justifyContent: 'space-around',\n      alignItems: 'center',\n      backgroundColor: 'lightgreen',\n      height: '30px',\n    }}>\n      <span>React-router-techs</span>\n      <span>\n        <Link to='/'>HOME</Link>\n        /\n        <Link to='/about'>ABOUT</Link>\n      </span>\n    </div>\n  );\n}\n\nexport default Header;","import React from 'react';\nimport {REPOSITORY_URL} from '../config';\n\nconst Footer: React.FC= () => {\n  return(\n      <div style={{\n        backgroundColor: 'lightgreen'\n      }}>\n        this app is created by nash >> <a href={REPOSITORY_URL}>github</a>.\n      </div>\n  );\n}\n\nexport default Footer;","export const REPOSITORY_URL = \"\";","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport { Techs } from '../TechData';\n\nconst Home: React.FC= () => {\n  return(\n    <>\n      <Header />\n      <p>ルーティングした情報を表示するサンプル</p>\n      {Techs.map(tech => {\n        const to = `/${tech.id.toString()}`;\n        return(\n          <li key={tech.id}>\n            <Link to={to}>{tech.name}</Link>\n          </li>\n        )\n      })}\n      <Footer />\n    </>\n  );\n}\n\nexport default Home;","import React from 'react';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\n\nconst About: React.FC= ():any => {\n  return(\n    <>\n      <Header />\n      <p>\n      このサンプルはreact-routerを理解するために作られたものです。\n      </p>\n      <Footer /> \n    </>\n  );\n}\n\nexport default About;","import React, {FC} from 'react';\nimport { RouteComponentProps, withRouter} from 'react-router';\nimport {Redirect} from 'react-router-dom';\nimport {Techs, TechData, whereToUse} from '../TechData';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\n\ntype Tech = {} & RouteComponentProps<{id: string}>\n\nconst Tech: FC<Tech> = ({history, location, match}) => {\n  const techId = parseInt(match.params.id);\n  const tech = Techs.find( (tech: TechData) => tech.id === techId);\n  \n  return (tech === undefined) ? (<Redirect to='/' />) : ( \n    <div>\n      <Header />\n      <p>\n        <span>ID: {tech.id}</span>\n        <span>/ NAME: {tech.name}</span>\n        <span>/ SIDE: {whereToUse[tech.side]}</span>\n      </p>\n      <p style={{width: '50%', margin: 'auto'}}>{tech.memo}</p>\n      <Footer />\n    </div>\n  )\n}\n\nexport default withRouter(Tech);","import React from 'react';\nimport './App.css';\nimport {Switch, Route, Redirect} from 'react-router';\nimport Home from './components/Home';\nimport About from './components/About';\nimport Tech from './components/Tech';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/:id\" component={Tech} />\n        <Route path=\"/\" component={Home} />\n        <Redirect to=\"/\" />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}